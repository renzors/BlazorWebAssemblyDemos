@using System.Timers
@page "/clock"

<div class="clock">
    <h4>@Message</h4>
    <div class="input-group">
        <span class="@currentCss">@currentTime</span>
        <div class="input-group-append">
            <button class="btn btn-primary" type="button" onclick="@startStop">@buttonAction</button>
        </div>
    </div>
    <h5>@ChildContent</h5>
</div>

@functions{
    [Parameter]
    string Message { get; set; }

    [Parameter]
    RenderFragment ChildContent { get; set; }

    string currentTime = "N/A";
    string buttonAction = "N/A";
    string currentCss = "clock-notset";
    Timer timer;

    protected override async Task OnInitAsync()
    {
        InitTimer();
        StartTimer();
    }

    void startStop()
    {
        if (timer.Enabled)
            StopTimer();
        else
            StartTimer();
    }

    private void StartTimer()
    {
        buttonAction = "STOP";
        timer.Start();
    }

    private void StopTimer()
    {
        buttonAction = "START";
        timer.Stop();
    }

    private void InitTimer()
    {
        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) => await TimerTick();
    }

    private Task TimerTick()
    {
        currentTime = DateTime.Now.ToLongTimeString();
        currentCss = "clock-working";
        this.StateHasChanged();

        return Task.CompletedTask;
    }
}